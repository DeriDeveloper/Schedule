@page "/auth"
@using System.Diagnostics;
@using System.Text;
@using WebApp.Models;
@using WebApp.Services;
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<PageTitle>Авторизация</PageTitle>


@if (isSignIn)
{
    <div style="width:300px; padding:10px; margin: 0 auto; margin-top: 100px;">
        <div class="container-block  pd-20">
            <h3 class="text-center">Авторизация</h3>
            <div style="margin-top:20px;">
                <div class="block-input">
                    <label>Логин</label>
                    <div class="container-input @(focusInputLoginSignIn ? "container-input-focus": "")" >
                        <div class="container-input-icon">
                            <img src="Images/User128.png" style="max-height:100%;max-width:100%;" />
                        </div>
                        <input type="text" @onfocus="HandelFocusInputLogin" @onblur="HandelBlurInputLogin" @bind="@loginModel.Login" />
                    </div>
                    @if (showErrorMessageInputLoginSignIn)
                    {
                        <p class="warning-color" style="margin: 0; ">@(textErrorMessageInputLogin)</p>
                    }
                </div>
                <div class="block-input">
                    <label>Пароль</label>
                    <div class="container-input @(focusInputPasswordSignIn ? "container-input-focus": "")">
                        <div class="container-input-icon">
                            <img src="Images/padlock128.png" style="max-height:100%;max-width:100%;"/>
                        </div>
                        <input type="@GetPasswordInputTypeSignIn()" autocomplete="new-password" @onfocus="HandelFocusInputPassword" @onblur="HandelBlurInputPassword" @bind="@loginModel.Password" />
                        <div>
                            <img src="@eyeImageURLSignIn" @onclick="TogglePasswordVisibilitySignIn" style="max-height:100%;max-width:100%; cursor:pointer;" />
                        </div>
                    </div>
                    @if (showErrorMessageInputPasswordSignIn)
                    {
                        <p class="warning-color" style="margin: 0; ">@(textErrorMessageInputPassword)</p>
                    }
                </div>
                <button class="btn btn-primary" disabled="@(!isButtonEnabledSignIn)" style="margin-top: 20px;" @onclick="SignIn">Войти</button>
                @if (showGlobalMessageSignIn)
                {
                    <p class="warning-color" style="margin: 0; margin-top: 15px; ">@(textGlobalMessage)</p>
                }

                @*<button class="btn btn-secondary" style="margin-top: 20px;" @onclick="ShowSignUp">Зарегистрироваться</button>*@
            </div>
        </div>
    </div>
}
else
{
    <div style="width:300px; padding:10px; margin: 0 auto; margin-top: 100px;">
        <div class="container-block  pd-20">
            <h3 class="text-center">Регистрация</h3>
            <div style="margin-top:20px;">
                <div class="block-input">
                    <label>Логин</label>
                    <div class="container-input @(focusInputLoginSignUp ? "container-input-focus": "")">
                        <div class="container-input-icon">
                            <img src="Images/User128.png" style="max-height:100%;max-width:100%;" />
                        </div>
                        <input type="text" @onfocus="HandelFocusInputLoginSignUp" @onblur="HandelBlurInputLoginSignUp" @bind="@registrationModel.Login" />
                    </div>
                    @if (showErrorMessageInputLoginSignUp)
                    {
                        <p class="warning-color" style="margin: 0; ">
                            @(textErrorMessageInputLoginSignUp)
                        </p>
                    }
                </div>
                <div class="block-input">
                    <label>Пароль</label>
                    <div class="container-input @(focusInputPasswordSignUp ? "container-input-focus": "")">
                        <div class="container-input-icon">
                            <img src="Images/padlock128.png" style="max-height:100%;max-width:100%;" />
                        </div>
                        <input type="@GetPasswordInputTypeSignUp()" autocomplete="new-password" @onfocus="HandelFocusInputPasswordSignUp" @onblur="HandelBlurInputPasswordSignUp" @bind="@registrationModel.Password" />
                        <!--<div>
                            <img src="@eyeImageURLSignUp" @onclick="TogglePasswordVisibilitySignUp" style="max-height:100%;max-width:100%; cursor:pointer;" />
                        </div>-->
                    </div>
                    @if (showErrorMessageInputPasswordSignUp)
                    {
                        <p class="warning-color" style="margin: 0; ">@(textErrorMessageInputPasswordSignUp)</p>
                    }
                </div>
                <div class="block-input">
                    <label>Повторите пароль</label>
                    <div class="container-input @(focusInputRepeatPasswordSignUp ? "container-input-focus": "")">
                        <div class="container-input-icon">
                            <img src="Images/padlock128.png" style="max-height:100%;max-width:100%;" />
                        </div>
                        <input type="@GetRepeatPasswordInputTypeSignUp()" autocomplete="new-password" @onfocus="HandelFocusInputRepeatPasswordSignUp" @onblur="HandelBlurInputRepeatPasswordSignUp" @bind="@registrationModel.RepeatPassword" />
                        <!--<div>
                            <img src="@eyeImageURLRepeatPasswordSignUp" @onclick="ToggleRepeatPasswordVisibilitySignUp" style="max-height:100%;max-width:100%; cursor:pointer;" />
                        </div>-->
                    </div>
                    @if (showErrorMessageInputPasswordSignUp)
                    {
                        <p class="warning-color" style="margin: 0; ">@(textErrorMessageInputRepeatPasswordSignUp)</p>
                    }
                </div>
                <div class="block-input">
                    <label>Тип пользователя</label>
                    <div class="container-input @(focusInputUserRoleSignUp ? "container-input-focus": "")">
                        <select @onchange="HandleUserRoleSelectChangeSignUp" @onfocus="HandelFocusInputUserRoleSignUp" @onblur="HandelBlurInputUserRoleSignUp">
                            <option selected value=""></option>
                            @foreach (var userRole in UserRoles)
                            {
                                @if (userRole.Id == selectedUserRoleId)
                                {
                                    <option value="@userRole.Id" selected>@userRole.Name</option>
                                }
                                else
                                {
                                    <option value="@userRole.Id">@userRole.Name</option>
                                }
                            }
                        </select>
                    </div>
                    @if (showErrorMessageInputUserRoleSignUp)
                    {
                        <p class="warning-color" style="margin: 0;">@(textErrorMessageInputUserRoleSignUp)</p>
                    }
                </div>
                <div class="block-input">
                    <label>Колледж</label>
                    <div class="container-input @(focusInputCollegeSignUp ? "container-input-focus": "")">
                        <select @onchange="HandleCollegeSelectChangeSignUp" @onfocus="HandelFocusInputCollegeSignUp" @onblur="HandelBlurInputCollegeSignUp">
                            <option selected value=""></option>
                            @foreach (var college in Colleges)
                            {
                                @if (college.Id == selectedCollegeId)
                                {
                                    <option value="@college.Id" selected>@college.Name</option>
                                }
                                else
                                {
                                    <option value="@college.Id">@college.Name</option>
                                }
                            }
                        </select>
                    </div>
                    @if (showErrorMessageInputCollegeSignUp)
                    {
                        <p class="warning-color" style="margin: 0;">@(textErrorMessageInputCollegeSignUp)</p>
                    }
                </div>
                <button class="btn btn-primary" disabled="@(!isButtonEnabledSignUp)" style="margin-top: 20px;" @onclick="SignUp">Зарегистрироваться</button>
                @if (showGlobalMessageSignUp)
                {
                    <p class="warning-color" style="margin: 0; margin-top: 15px; ">
                        @(textGlobalMessageSignUp)
                    </p>
                }

                <button class="btn btn-secondary" style="margin-top: 20px;" @onclick="ShowSignIn">Назад</button>
            </div>
        </div>
    </div>
}


@code {
    private CookieHelperService _cookieHelperService;
    private AccountService _accountService;


    private string urlRedirect = "";

    private const string eyeViewImageURL = "Images/EyeView128.png";
    private const string eyeHideImageURL = "Images/EyeHide128.png";


    private bool showPasswordSignIn { get; set; } 
    private bool focusInputLoginSignIn { get; set; }
    private bool focusInputPasswordSignIn { get; set; }
    private bool showErrorMessageInputLoginSignIn { get; set; }
    private bool validInputLoginSignIn { get; set; }
    private bool showErrorMessageInputPasswordSignIn { get; set; }
    private bool validInputPasswordSignIn { get; set; }
    private bool showGlobalMessageSignIn { get; set; }
    private bool isButtonEnabledSignIn { get; set; } = true;


    private string eyeImageURLSignIn { get; set; } = eyeViewImageURL;
    private string textErrorMessageInputLogin = "";
    private string textErrorMessageInputPassword { get; set; } = "";
    private string textGlobalMessage { get; set; } = "";




    private bool validInputLoginSignUp { get; set; }
    private bool validInputPasswordSignUp { get; set; }
    private bool validInputRepeatPasswordSignUp { get; set; }

    private bool focusInputLoginSignUp { get; set; }
    private bool focusInputPasswordSignUp { get; set; }
    private bool focusInputRepeatPasswordSignUp { get; set; }
    private bool focusInputUserRoleSignUp { get; set; }
    private bool focusInputCollegeSignUp { get; set; }

    private bool showPasswordSignUp { get; set; }
    private bool showRepeatPasswordSignUp { get; set; }
    private bool showErrorMessageInputLoginSignUp { get; set; }
    private bool showErrorMessageInputPasswordSignUp { get; set; }
    private bool showErrorMessageInputRepeatPasswordSignUp { get; set; }
    private bool showErrorMessageInputUserRoleSignUp { get; set; }
    private bool showErrorMessageInputCollegeSignUp { get; set; }

    private string eyeImageURLSignUp { get; set; } = eyeViewImageURL;
    private string eyeImageURLRepeatPasswordSignUp { get; set; } = eyeViewImageURL;
    private string textErrorMessageInputLoginSignUp { get; set; } = "";
    private string textErrorMessageInputPasswordSignUp { get; set; } = "";
    private string textErrorMessageInputRepeatPasswordSignUp { get; set; } = "";
    private string textErrorMessageInputUserRoleSignUp { get; set; } = "";
    private string textErrorMessageInputCollegeSignUp { get; set; } = "";



    private string textGlobalMessageSignUp = "";
    private bool showGlobalMessageSignUp = false;

    private bool isButtonEnabledSignUp = true;

    private List<UserRole> UserRoles { get; set; } = new();
    private List<College> Colleges { get; set; } = new();

    private int selectedUserRoleId { get; set; }
    private int selectedCollegeId { get; set; }




    private bool isSignIn { get; set; } = true;


    private bool isInitFormSignUp { get; set; }



    private LoginModel loginModel = new LoginModel();
    private RegistrationModel registrationModel = new RegistrationModel();



    [CascadingParameter]
    public MainLayout Layout { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ((MainLayout)Layout).ShowLoadingScreen();

            var tokenAccess = await _cookieHelperService.GetTokenAccessAsync();

            if (!string.IsNullOrEmpty(tokenAccess))
            {
                await IsUserAuthenticatedAsync(tokenAccess);
            }


            ((MainLayout)Layout).HideLoadingScreen();
        }
    }

    protected override async void OnInitialized()
    {

        _cookieHelperService = new CookieHelperService(JSRuntime);
        _accountService = new AccountService(JSRuntime);

        var uri = new Uri(NavigationManager.Uri);
        var urlRedirect = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("urlRedirect");

        if (!string.IsNullOrEmpty(urlRedirect))
        {
            this.urlRedirect = urlRedirect;
        }


    }

    private async void ShowSignUp()
    {
        isSignIn = false;

        if (!isInitFormSignUp)
        {
            await InitFormSignUpAsync();
        }

        StateHasChanged();
    }

    private async Task InitFormSignUpAsync()
    {

        var userRolesTemp = await Services.ScheduleAPIService.GetUserRolesAsync();
        Colleges = await Services.ScheduleAPIService.GetCollegesAsync();

        userRolesTemp = userRolesTemp.Where(x => x.Id == 2 || x.Id == 4).ToList();

        UserRoles = userRolesTemp;

        isInitFormSignUp = true;
    }


    private  void ShowSignIn()
    {
        isSignIn = true;

        StateHasChanged();
    }

    private  void HandleUserRoleSelectChangeSignUp(ChangeEventArgs e)
    {
        showErrorMessageInputUserRoleSignUp = false;

        selectedUserRoleId = 0;


        if (string.IsNullOrEmpty(e.Value as string))
        {
            textErrorMessageInputUserRoleSignUp = "Тип пользователя не выбран!";
            showErrorMessageInputUserRoleSignUp = true;
            return;
        }
        selectedUserRoleId = int.Parse((string)e.Value);

        registrationModel.UserRoleId = selectedUserRoleId;

        StateHasChanged();
    }


    private  void HandleCollegeSelectChangeSignUp(ChangeEventArgs e)
    {
        showErrorMessageInputCollegeSignUp = false;

        selectedCollegeId = 0;


        if (string.IsNullOrEmpty(e.Value as string))
        {
            textErrorMessageInputCollegeSignUp = "колледж не выбран!";
            showErrorMessageInputCollegeSignUp = true;
            return;
        }
        selectedCollegeId = int.Parse((string)e.Value);

        registrationModel.CollegeId = selectedCollegeId;

        StateHasChanged();
    }



    private async Task IsUserAuthenticatedAsync(string token)
    {
        var statusValidToken = await Services.ScheduleAPIService.ValidTokenAsync(token);

        if (statusValidToken)
        {
            if (string.IsNullOrEmpty(this.urlRedirect))
            {
                NavigationManager.NavigateTo("/profile");
            }
            else
            {
                NavigationManager.NavigateTo(this.urlRedirect);
            }
        }
        else
        {
            _accountService.Logout();
            NavigationManager.NavigateTo("/auth");
        }
    }

    private async Task SignUp()
    {
        isButtonEnabledSignUp = false;

        try
        {
            if (!validInputLoginSignUp || !validInputPasswordSignUp || !validInputRepeatPasswordSignUp)
            {
                ShowGlobalMessageSignUp("Исправьте ошибки!");
            }
            else
            {
                if (registrationModel.Password != registrationModel.RepeatPassword)
                {
                    ShowGlobalMessageSignUp("Пароли не совпадают!");
                    StateHasChanged();
                    return;
                }


                // удалить
                registrationModel.Name = "name";
                registrationModel.Email = "mail@gmail.com";
                //

                var response = await ScheduleAPIService.Account.RegistariotionAsync(login: registrationModel.Login, password: registrationModel.Password, name: registrationModel.Name, email: registrationModel.Email, userRoleId: registrationModel.UserRoleId, collegeId: registrationModel.CollegeId);

                if (response is null)
                {
                    ShowGlobalMessageSignUp("Произошла неизвестная ошибка, попробуйте еще раз!");
                }
                else
                {
                    if (response.IsSuccess)
                    {
                        loginModel.Login = registrationModel.Login;
                        loginModel.Password = registrationModel.Password;
                        isSignIn = true;
                    }
                    else
                    {
                        if (response.ErrorMessages is not null)
                        {
                            StringBuilder sb = new StringBuilder();

                            foreach (var errorMessage in response.ErrorMessages)
                            {
                                sb.AppendLine(errorMessage.Message);
                            }

                            ShowGlobalMessageSignUp(sb.ToString());
                        }
                        else
                        {
                            ShowGlobalMessageSignUp("Произошла неизвестная ошибка, попробуйте еще раз!");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }

        isButtonEnabledSignUp = true;

        StateHasChanged();

    }

    private async Task SignIn(MouseEventArgs e)
    {
        isButtonEnabledSignIn = false;

        try
        {
            if (!validInputLoginSignIn || !validInputPasswordSignIn)
            {
                ShowGlobalMessage("Исправьте ошибки!");
            }
            else
            {
                var response = await ScheduleAPIService.AuthorizationAsync(loginModel.Login, loginModel.Password);

                var status = response.status;

                if (status == System.Net.HttpStatusCode.OK)
                {
                    var token = response.response?.Token;

                    if (string.IsNullOrEmpty(token))
                    {
                        throw new ArgumentNullException(nameof(token), "Значение токена не может быть пыстым или равным null.");
                    }



                    #region Заменить изменение token в cookie с помощью  HttpContextAccessor.HttpContext.Response.Cookies (не дает потому что "web socket" status: 101)

                    await _cookieHelperService.UpdateTokenAccessAsync(token);

                    /*var option = new CookieOptions();
                    option.Expires = DateTime.Now.AddMonths(6); 
                    option.IsEssential = true;
                    option.Secure = true;

                    HttpContextAccessor.HttpContext.Response.Cookies.Append("TokenAccess", token, option);*/
                    #endregion

                    if (!string.IsNullOrEmpty(this.urlRedirect))
                    {
                        NavigationManager.NavigateTo(this.urlRedirect);
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/Profile");
                    }
                    var foo = 0;
                }
                else if (status == System.Net.HttpStatusCode.NotFound)
                {
                    UserNotFound();
                }
                else
                {
                    ShowGlobalMessage("Произошла неизвестная ошибка, попробуйте еще раз!");
                }
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }

        isButtonEnabledSignIn = true;
    }

    private void UserNotFound()
    {
        ShowGlobalMessage("Неверный логин или пароль!");

        textErrorMessageInputPassword = "";
    }

    private void ShowGlobalMessage(string message)
    {
        textGlobalMessage = message;
        showGlobalMessageSignIn = true;
    }
    private void ShowGlobalMessageSignUp(string message)
    {
        textGlobalMessageSignUp = message;
        showGlobalMessageSignUp = true;
    }



    private void HandelFocusInputLogin()
    {
        focusInputLoginSignIn = true;
    }

    private void HandelBlurInputLogin()
    {
        focusInputLoginSignIn = false;

        CheckValidDataLogin();
    }
    private void HandelFocusInputUserRoleSignUp()
    {
        focusInputUserRoleSignUp = true;
    }


    private void HandelFocusInputCollegeSignUp()
    {
        focusInputCollegeSignUp = true;
    }

    private void HandelBlurInputCollegeSignUp()
    {
        focusInputCollegeSignUp = false;

        CheckValidDataLogin();
    }

    private void HandelBlurInputUserRoleSignUp()
    {
        focusInputUserRoleSignUp = false;

        CheckValidDataLogin();
    }

    private void HandelFocusInputPassword()
    {
        focusInputPasswordSignIn = true;
    }

    private void HandelBlurInputPassword()
    {
        focusInputPasswordSignIn = false;

        CheckValidDataPassword();

    }

    private void HandelFocusInputLoginSignUp()
    {
        focusInputLoginSignUp= true;
    }

    private void HandelBlurInputLoginSignUp()
    {
        focusInputLoginSignUp = false;

        CheckValidDataLoginSignUp();
    }
    private void HandelFocusInputPasswordSignUp()
    {
        focusInputPasswordSignUp = true;
    }

    private void HandelBlurInputPasswordSignUp()
    {
        focusInputPasswordSignUp = false;

        CheckValidDataPasswordSignUp();
    }

    private void HandelFocusInputRepeatPasswordSignUp()
    {
        focusInputRepeatPasswordSignUp = true;
    }

    private void HandelBlurInputRepeatPasswordSignUp()
    {
        focusInputRepeatPasswordSignUp = false;

        CheckValidDataRepeatPasswordSignUp();
    }

    private void TogglePasswordVisibilitySignIn()
    {
        showPasswordSignIn = !showPasswordSignIn;

        if (showPasswordSignIn)
        {
            eyeImageURLSignIn = eyeHideImageURL;
        }
        else
        {
            eyeImageURLSignIn = eyeViewImageURL;
        }
    }

    private void TogglePasswordVisibilitySignUp()
    {
        showPasswordSignUp = !showPasswordSignUp;

        if (showPasswordSignUp)
        {
            eyeImageURLSignUp = eyeHideImageURL;
        }
        else
        {
            eyeImageURLSignUp = eyeViewImageURL;
        }
    }

    private void ToggleRepeatPasswordVisibilitySignUp()
    {
        showRepeatPasswordSignUp = !showRepeatPasswordSignUp;

        if (showRepeatPasswordSignUp)
        {
            eyeImageURLRepeatPasswordSignUp = eyeHideImageURL;
        }
        else
        {
            eyeImageURLRepeatPasswordSignUp = eyeViewImageURL;
        }
    }


    private void CheckValidDataLogin()
    {
        if (string.IsNullOrEmpty(loginModel.Login))
        {
            showErrorMessageInputLoginSignIn = true;
            textErrorMessageInputLogin = "Не введен логин!";
            validInputLoginSignIn = false;
        }
        else
        {
            showErrorMessageInputLoginSignIn = false;
            textErrorMessageInputLogin = "";
            validInputLoginSignIn = true;
        }        
    }
    private void CheckValidDataPassword()
    {
        if (string.IsNullOrEmpty(loginModel.Password))
        {
            showErrorMessageInputPasswordSignIn = true;
            textErrorMessageInputPassword = "Не введен пароль!";
        }
        else
        {
            showErrorMessageInputPasswordSignIn = false;
            textErrorMessageInputPassword = "";
            validInputPasswordSignIn = true;
        }
    }





    private void CheckValidDataLoginSignUp()
    {
        if (string.IsNullOrEmpty(registrationModel.Login))
        {
            showErrorMessageInputLoginSignUp = true;
            textErrorMessageInputLoginSignUp = "Не введен логин!";
            validInputLoginSignUp = false;
        }
        else
        {
            showErrorMessageInputLoginSignUp = false;
            textErrorMessageInputLoginSignUp = "";
            validInputLoginSignUp = true;
        }
    }

    private void CheckValidDataPasswordSignUp()
    {
        if (string.IsNullOrEmpty(registrationModel.Password))
        {
            showErrorMessageInputPasswordSignUp = true;
            textErrorMessageInputPasswordSignUp = "Не введен пароль!";
            validInputPasswordSignUp = false;
        }
        else if (registrationModel.Password != registrationModel.RepeatPassword)
        {
            showErrorMessageInputPasswordSignUp = true;
            textErrorMessageInputPasswordSignUp = "Пароли не совпадают!";
            validInputPasswordSignUp = false;
        }
        else
        {
            showErrorMessageInputPasswordSignUp = false;
            textErrorMessageInputPasswordSignUp = "";
            validInputPasswordSignUp = true;
        }
    }

    private void CheckValidDataRepeatPasswordSignUp()
    {
        if (string.IsNullOrEmpty(registrationModel.RepeatPassword))
        {
            showErrorMessageInputRepeatPasswordSignUp = true;
            textErrorMessageInputRepeatPasswordSignUp = "Не введен пароль!";
            validInputRepeatPasswordSignUp = false;
        }
        else if (registrationModel.Password != registrationModel.RepeatPassword)
        {
            showErrorMessageInputRepeatPasswordSignUp = true;
            textErrorMessageInputRepeatPasswordSignUp = "Пароли не совпадают!";
            validInputRepeatPasswordSignUp = false;
        }
        else
        {
            showErrorMessageInputRepeatPasswordSignUp = false;
            textErrorMessageInputRepeatPasswordSignUp = "";
            validInputRepeatPasswordSignUp = true;
        }
    }



    private string GetPasswordInputTypeSignIn()
    {
        return showPasswordSignIn ? "text" : "password";
    }


    private string GetPasswordInputTypeSignUp()
    {
        return showPasswordSignUp ? "text" : "password";
    }


    private string GetRepeatPasswordInputTypeSignUp()
    {
        return showRepeatPasswordSignUp ? "text" : "password";
    }
}