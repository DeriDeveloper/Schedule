@page "/profile"
@using System.Diagnostics;
@using WebApp.Models;
@using WebApp.Services;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager



<div class="container-block pd-20">
    <h3 style="text-align:center;">Профиль</h3>

    <div>
        <div class="block-input">
            <div class="container-avatar" style="width:150px; height:150px;">
                <div style="">
                    <img style="max-width: 100%; max-height: 100%;" src="@(urlProfileAvatar)" />
                </div>

                <div style="background-color:#60000000;">

                </div>
            </div>
            <p class="warning-color" style="margin: 0; @(showErrorMessageInputName ? "visibility: visible;" : "visibility: collapse;")">@(textErrorMessageInputName)</p>
        </div>

        <div class="block-input">
            <label>Имя</label>
            <div class="container-input @(focusInputName ? "container-input-focus": "")">
                <input type="text" disabled="@(!isProfileNameEnabled)" @onfocus="HandelFocusInputName" @onblur="HandelBlurInputName" @bind="@profileModel.Name" />
            </div>
            <p class="warning-color" style="margin: 0; @(showErrorMessageInputName ? "visibility: visible;" : "visibility: collapse;")">@(textErrorMessageInputName)</p>
        </div>

        <div class="block-input">
            <label>Колледж</label>
            <div class="container-input @(focusInputCollege ? "container-input-focus": "")">
                <select @onchange="HandleCollegeSelectChange" @onfocus="HandelFocusInputCollege" @onblur="HandelBlurInputCollege">
                    <option selected value=""></option>
                    @foreach (var college in Colleges)
                    {
                        @if (college.Id == selectedCollegeId)
                        {
                            <option value="@college.Id" selected>@college.Name</option>
                        }
                        else
                        {
                            <option value="@college.Id">@college.Name</option>
                        }
                    }
               </select>
            </div>
            @if (showErrorMessageInputCollege)
            {
                <p class="warning-color" style="margin: 0; ">@(textErrorMessageInputCollege)</p>
            }
        </div>

        <div class="block-input">
            <label>Группа</label>
            <div class="container-input @(focusInputGroup ? "container-input-focus": "")">
                <select @onchange="HandleGroupSelectChange" @onfocus="HandelFocusInputGroup" @onblur="HandelBlurInputGroup">
                    <option selected value=""></option>
                    @foreach (var group in Groups)
                    {
                        @if (group.Id == selectedGroupId)
                        {
                            <option value="@group.Id" selected>@group.Name</option>
                        }
                        else
                        {
                            <option value="@group.Id">@group.Name</option>
                        }
                    }
                </select>
            </div>
            @if (showErrorMessageInputGroup){
                <p class="warning-color" style="margin: 0;">@(textErrorMessageInputGroup)</p>
            }
        </div>



        <button class="btn btn-primary" disabled="@(!isButtonSaveEnabled)" style="margin-top: 20px;" @onclick="SaveProfile">Сохранить</button>

    </div>

    @*<div>
        <div class="block-input">
            <label>Пароль</label>
            <div class="container-input @(focusInputOldPassword ? "container-input-focus": "")">
                <div class="container-input-icon">
                    <img src="Images/padlock128.png" style="max-height:100%;max-width:100%;" />
                </div>
                <input type="@GetOldPasswordInputType()" @onfocus="HandelFocusInputOldPassword" @onblur="HandelBlurInputOldPassword" @bind="@profileModel.OldPassword" />
                <div>
                    <img src="@eyeImageURL" @onclick="ToggleOldPasswordVisibility" style="max-height:100%;max-width:100%; cursor:pointer;" />
                </div>
            </div>
            <p class="warning-color" style="margin: 0; @(showErrorMessageInputOldPassword ? "visibility: visible;" : "visibility: collapse;")">@(textErrorMessageInputOldPassword)</p>
        </div>

        <button class="btn btn-primary" disabled="@(!isButtonChangePasswordEnabled)" style="margin-top: 20px;" @onclick="ChangePassword">Изменить</button>

    </div>*@

    <button class="btn btn-primary" style="margin-top: 20px;" @onclick="Logout">Выйти</button>
</div>

@code {
    private AccountService _accountService;

    private ProfileModel profileModel;

    private string eyeImageURL = "Images/EyeView128.png";

    private bool focusInputName = false;
    private bool showErrorMessageInputName = false;
    private bool validInputName = false;
    private string textErrorMessageInputName = "";


    private bool focusInputCollege = false;
    private bool showErrorMessageInputCollege = false;
    private bool validInputCollege = false;
    private string textErrorMessageInputCollege = "";


    private bool focusInputGroup = false;
    private bool showErrorMessageInputGroup = false;
    private bool validInputGroup = false;
    private string textErrorMessageInputGroup = "";

    private bool showOldPassword = false;
    private bool focusInputOldPassword = false;
    private bool showErrorMessageInputOldPassword = false;
    private bool validInputOldPassword = false;
    private string textErrorMessageInputOldPassword = "";

    private bool isButtonSaveEnabled = true;
    private bool isButtonChangePasswordEnabled = true;
    private bool isProfileNameEnabled = true;

    private string? tokenAccess { get; set; }


    private string urlProfileAvatar { get; set; } = "https://sun136-1.userapi.com/s/v1/ig2/P1NBCyJcCgQqY-DEkHtsHgwGtNcym_FQok1fS6xjrfnfn9HLtTGHIIKP3DJk0_xlUI-QnwgCfSfSwBCViGLNpLf_.jpg?size=200x200&quality=96&crop=222,424,832,832&ava=1";

    private List<College> Colleges { get; set; } = new List<College>();
    private int selectedCollegeId { get; set; }

    private List<Group> Groups { get; set; } = new List<Group>();
    private int selectedGroupId { get; set; }



    protected override async void OnInitialized()
    {
        _accountService = new AccountService(JSRuntime);

        profileModel = new ProfileModel();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tokenAccess = await _accountService.GetTokenAccessAsync();

            Colleges = await Services.ScheduleAPIService.GetCollegesAsync();

            //var responseGroups = await Services.ScheduleAPIService.GetGroups(1, 1); // заменить на реальные данные

            var profileInfoResponse = await Services.ScheduleAPIService.Account.GetProfileInfoAsync(tokenAccess);

            if (profileInfoResponse is not null)
            {
                profileModel.Name = profileInfoResponse.Name;

                if(profileInfoResponse.StudentDetail is not null)
                {
                    if (profileInfoResponse.StudentDetail.GroupId > 0)
                    {
                        selectedGroupId = profileInfoResponse.StudentDetail.GroupId;
                    }

                    if (profileInfoResponse.StudentDetail.Group is not null)
                    {
                        if (profileInfoResponse.StudentDetail.Group.CollegeId > 0)
                        {
                            selectedCollegeId = profileInfoResponse.StudentDetail.Group.CollegeId;

                            await UploadGroupSelectAsync();
                        }
                    }
                }
            }

            StateHasChanged();
        }
    }

    private void ChangePassword(MouseEventArgs e)
    {

    }



    private async void HandleGroupSelectChange(ChangeEventArgs e)
    {
        showErrorMessageInputGroup = false;


        if (string.IsNullOrEmpty(e.Value as string))
        {
            textErrorMessageInputGroup = "Группа не выбрана!";
            showErrorMessageInputGroup = true;
            return;
        }

        selectedGroupId = int.Parse((string)e.Value);

    }

    private async void HandleCollegeSelectChange(ChangeEventArgs e)
    {
        showErrorMessageInputCollege = false;

        selectedGroupId = 0;

        Groups = new List<Group>();


        if (string.IsNullOrEmpty(e.Value as string))
        {
            textErrorMessageInputCollege = "Колледж не выбран!";
            showErrorMessageInputCollege = true;
            return;
        }
        selectedCollegeId = int.Parse((string)e.Value);

        await UploadGroupSelectAsync();

        StateHasChanged();
    }

    private async Task UploadGroupSelectAsync()
    {
        var dateNow = DateTime.Now;

        var currentYear = dateNow.Year;
        var currentMonth = dateNow.Month;

        int resultYear = 0;

        if (currentMonth > 8)
        {
            resultYear = currentYear;
        }
        else
        {
            resultYear = currentYear - 1;
        }

        var responseGroups = await Services.ScheduleAPIService.GetGroups(selectedCollegeId, resultYear);

        Groups = new List<Group>();

        if (responseGroups is not null)
        {
            foreach (var responseGroup in responseGroups)
            {
                Groups.Add(new Group()
                    {
                        Id = responseGroup.Id,
                        CollegeId = responseGroup.CollegeId,
                        Name = responseGroup.Name,
                        Year = responseGroup.Year,
                    });
            }
        }
    }

    private async void SaveProfile(MouseEventArgs e)
    {
        isButtonSaveEnabled = false;

        try
        {
            if (!string.IsNullOrEmpty(profileModel.Name))
            {
                await Services.ScheduleAPIService.Account.SaveProfileInfoAsync(tokenAccess, name: profileModel.Name, collegeId: selectedCollegeId, groupId: selectedGroupId);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }

        isButtonSaveEnabled = true;

        StateHasChanged();

    }

    private void Logout(MouseEventArgs e)
    {
        _accountService.Logout();
        NavigationManager.NavigateTo("/auth");
    }

    private void HandelFocusInputCollege()
    {
        focusInputCollege = true;
    }

    private void HandelBlurInputCollege()
    {
        focusInputCollege = false;
    }

    private void HandelFocusInputGroup()
    {
        focusInputGroup = true;
    }

    private void HandelBlurInputGroup()
    {
        focusInputGroup = false;
    }

    private void HandelFocusInputName()
    {
        focusInputName = true;
    }

    private void HandelBlurInputName()
    {
        focusInputName = false;

        CheckValidDataName();
    }
    private void HandelFocusInputOldPassword()
    {
        focusInputOldPassword = true;
    }

    private void HandelBlurInputOldPassword()
    {
        focusInputOldPassword = false;

        CheckValidDataOldPassword();

    }

    private void ToggleOldPasswordVisibility()
    {
        showOldPassword = !showOldPassword;

        if (showOldPassword)
        {
            eyeImageURL = "Images/EyeHide128.png";
        }
        else
        {
            eyeImageURL = "Images/EyeView128.png";
        }
    }


    private void CheckValidDataName()
    {
        if (string.IsNullOrEmpty(profileModel.Name))
        {
            showErrorMessageInputName = true;
            textErrorMessageInputName = "Не указано имя!";
            validInputName = false;
        }
        else
        {
            showErrorMessageInputName = false;
            textErrorMessageInputName = "";
            validInputName = true;
        }
    }
    private void CheckValidDataOldPassword()
    {
        if (string.IsNullOrEmpty(profileModel.OldPassword))
        {
            showErrorMessageInputOldPassword = true;
            textErrorMessageInputOldPassword = "Не введен пароль!";
        }
        else
        {
            showErrorMessageInputOldPassword = false;
            textErrorMessageInputOldPassword = "";
            validInputOldPassword = true;
        }
    }



    private string GetOldPasswordInputType()
    {
        return showOldPassword ? "text" : "OldPassword";
    }
}
