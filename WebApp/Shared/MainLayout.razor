@using System.Diagnostics;
@using WebApp.Models;
@using WebApp.Services;
@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<PageTitle>Расписание</PageTitle>

<CascadingValue Value="this">

<div class="spash-screen-container" style="z-index:9999; position:absolute; top:0; left:0; height:100vh; width:100%; background-color:#DFC8FF; @(showLoadingScreen? "display:flex;" : "display:none;")">
    <div style="display: flex; justify-content: center; flex-direction: column; align-items: center;">
        <div style="max-width:150px; max-height:150px;">
            <img src="/Images/LogoLight.png" style="width:100%;height:100%;" />
        </div>
        <p style="color:#fff; font-size: 30px;">Расписание</p>
    </div>
</div>


<div class="page" style="@(showContentPage ? "display:block;" : "display:none;")">
    <main class="main-background">
        <div class="top-row px-4" style="display: flex; justify-content: space-between; background-color:#A687D0;">
            <div style="max-width: 1200px; width: 100%; display: flex; margin: 0 auto; justify-content: space-between;">
                <div style="display: flex; justify-content: center; align-items: center;">
                    <a href="" style="margin: 0;">
                        <div style="display:flex; align-items: center;">
                            <div style="max-width:35px;max-height:35px;">
                                <img src="/Images/LogoLight.png" style="width:100%;height:100%;"/>
                            </div>
                                <p style="margin:0 0 0 10px; color:#fff; font-size: 24px;">Расписание</p>
                        </div>
                    </a>
                    <div style="position:relative; margin-left: 10px;">
                        <div style="border-radius:5px; background-color:#fff;">
                                <input type="text" @bind="@searchText" @oninput="HandleInputSearchTextChange" @onfocus="HandelFocusInputSearchTextChange" @onblur="HandelBlurInputSearchTextChange" />
                        </div>
                        <div style="@(showResultContainerSearchBar ? "display:flex;" : "display:none;") overflow: overlay; height: 250px;"  class="search-result-list-container">
                            <div style="max-width:100%;">
                                    <p style="margin:0;">Группы</p>

                                <div>
                                    @foreach (var group in GroupsSearchResult)
                                    {
                                        <div class="container-item-search-result" @onclick="@(()=> OpenGroupPage(group.Id))">
                                            <p style="margin:0; text-wrap: wrap;">@group.Name</p>
                                        </div>
                                    }
                                </div>

                                    <p style="margin:0;">Преподаватели</p>

                                <div>
                                    @foreach (var teacher in TeachersSearchResult)
                                    {
                                        <div class="container-item-search-result" @onclick="@(()=> OpenTeacherPage(teacher.Id))">
                                            <p style="margin:0; text-wrap: wrap;">@teacher.Name</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div style="@(showAuthorizBlock ? "display: flex;" : "display: none;")">
                    <a href="@(isAuthorized ? "profile": "auth")" style="margin: 0;">
                        <div class="mini-profile-top" style="display: flex; align-items: center;">
                            @if (isAuthorized)
                            {
                                <div style="display: flex; align-items: center;">
                                    <div class="container-avatar" style="width:35px; height:35px;">
                                        <img style="max-width: 100%; max-height: 100%; width: 100%; height: 100%;" src="@(UrlProfileAvatar)" />
                                    </div>
                                        <p style="margin: 0 0 0 10px; color: white;">@(UserName.Length > 15 ? UserName.Substring(0, 15) + "..." : UserName)</p>
                                </div>
                            }
                            else
                            {
                                <p style="margin: 0;color: white;">Войти</p>
                            }
                        </div>
                    </a>
                </div>
            </div>
        </div>
        <article class="content px-4" style="margin-bottom: 20px;">
            <div style="max-width:1200px; margin: 0 auto;">
                @Body
            </div>
        </article>
    </main>
    <footer>
        <div>
            <div style="background-color: #A687D0; width:100%; height:2px;"></div>
            <div style="display: flex; padding:10px 0; max-width:1200px; margin:0 auto;">
                <div>
                    <p style="color:#A687D0;">© 2023 <a href="http://derideveloper.ru">DeriDeveloper</a>. Все права защищены.</p>
                </div>
            </div>
        </div>
    </footer>
</div>

</CascadingValue>


@code{
    private bool isAuthorized { get; set; } = false;
    private string UserName { get; set; }
    private string UrlProfileAvatar { get; set; }
    public string? TokenAccess { get; set; }
    public Types.Enums.UserRole UserRole { get; set; }
    public int CollegeId { get; set; }
    private bool showAuthorizBlock { get; set; } = false;
    private bool showLoadingScreen { get; set; } = true;
    private bool showContentPage { get; set; } = false;
    private bool showResultContainerSearchBar { get; set; }



    private string searchText { get; set; } = "";
    private List<ResponseGroup> GroupsSearchResult { get; set; } = new();
    private List<Models.Teacher> TeachersSearchResult { get; set; } = new();

    private AccountService _accountService;


    private CancellationTokenSource searchBarCancellationTokenSource;


    protected override async void OnInitialized()
    {
        _accountService = new AccountService(JSRuntime);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                ShowLoadingScreen();



                TokenAccess = await _accountService.GetTokenAccessAsync();

                var profileInfoResponse = await Services.ScheduleAPIService.Account.GetProfileInfoAsync(TokenAccess);

                if (profileInfoResponse is not null)
                {
                    isAuthorized = true;

                    if (profileInfoResponse.UserRole is not null)
                    {
                        UserRole = (Types.Enums.UserRole)profileInfoResponse.UserRole.Id;
                    }

                    UserName = profileInfoResponse.Name;
                    CollegeId = profileInfoResponse.CollegeId;
                    UrlProfileAvatar = $"{Program.UrlAPI}/images/get/{profileInfoResponse.ProfileAvatarName}";
                }

                showAuthorizBlock = true;

                HideLoadingScreen();

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }
    }


    private void OpenGroupPage(int id)
    {
        try
        {
            if (id > 0)
            {
                searchText = "";
                NavigationManager.NavigateTo($"/group/{id}", true);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }

        showResultContainerSearchBar = false;

        StateHasChanged();
    }



    private async void HandelFocusInputSearchTextChange()
    {
        showResultContainerSearchBar = true;

        StateHasChanged();


        try
        {
            await Task.Run(async () =>
            {
                await FillResultSearchBarAsync("");
            });
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }



        StateHasChanged();
    }

    private void HandelBlurInputSearchTextChange()
    {
        Task.Run(() =>
       {
           Thread.Sleep(500);

           showResultContainerSearchBar = false;

           InvokeAsync(() =>
           {
               StateHasChanged();
           });
       });
    }

    private void OpenTeacherPage(int id)
    {
        try
        {
            if (id > 0)
            {
                searchText = "";
                NavigationManager.NavigateTo($"/teacher/{id}", true);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }

        showResultContainerSearchBar = false;

        StateHasChanged();
    }

    private async void HandleInputSearchTextChange(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var text = e.Value.ToString();

            if (CollegeId > 0)
            {
                searchBarCancellationTokenSource?.Cancel();

                showResultContainerSearchBar = false;

                StateHasChanged();

                searchBarCancellationTokenSource = new CancellationTokenSource();
                var cancellationToken = searchBarCancellationTokenSource.Token;

                try
                {
                    await Task.Run(async () =>
                    {
                        await FillResultSearchBarAsync(text);
                    });
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.ToString());
                }
            }

        }
    }

    public async Task RestartAfterRenderAsync(bool firstRender)
    {
        await OnAfterRenderAsync(firstRender);
    }

    public async Task FillResultSearchBarAsync(string text)
    {
        var academicYear = Services.DateService.GetCurrentAcademicYear();

        GroupsSearchResult = await Services.ScheduleAPIService.GetGroupsAsync(CollegeId, academicYear);
        TeachersSearchResult = await Services.ScheduleAPIService.GetTeachersAsync(CollegeId);

        if (!string.IsNullOrEmpty(text))
        {

            GroupsSearchResult = GroupsSearchResult.Where(x => x.Name.Contains(text, StringComparison.InvariantCultureIgnoreCase)).ToList();
            TeachersSearchResult = TeachersSearchResult.Where(x => x.Name.Contains(text, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

        showResultContainerSearchBar = true;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void ShowLoadingScreen()
    {
        showLoadingScreen = true;
        showContentPage = false;

        StateHasChanged();
    }


    public void HideLoadingScreen()
    {
        showLoadingScreen = false;
        showContentPage = true;

        StateHasChanged();
    }

    public async Task<bool> ConfirmDialogShowAsync(string text)
    {
        var result = false;

        await InvokeAsync(async () =>
        {
            result = await JSRuntime.InvokeAsync<bool>("confirm", text);
        });

        return result;
    }

    public async Task AlertMessageAsync(string text)
    {
        await InvokeAsync(async () =>
        {
            await JSRuntime.InvokeVoidAsync("alert", text);
        });
    }
}