@using System.Diagnostics;
@using WebApp.Services;
@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime


<PageTitle>Расписание</PageTitle>

<CascadingValue Value="this">

<div class="spash-screen-container" style="z-index:9999; position:absolute; top:0; left:0; height:100vh; width:100%; background-color:#DFC8FF; @(showLoadingScreen? "display:flex;" : "display:none;")">
    <div style="display: flex; justify-content: center; flex-direction: column; align-items: center;">
        <div style="max-width:150px; max-height:150px;">
            <img src="/Images/LogoLight.png" style="width:100%;height:100%;" />
        </div>
        <p style="color:#fff; font-size: 30px;">Расписание</p>
    </div>
</div>


<div class="page" style="@(showContentPage ? "display:block;" : "display:none;")">
    <main class="main-background">
        <div class="top-row px-4" style="display: flex; justify-content: space-between; background-color:#A687D0;">
            <div style="max-width: 1200px; width: 100%; display: flex; margin: 0 auto; justify-content: space-between;">
                <div style="display: flex; justify-content: center; align-items: center;">
                    <a href="" style="margin: 0;">
                        <div style="display:flex; align-items: center;">
                            <div style="max-width:35px;max-height:35px;">
                                <img src="/Images/LogoLight.png" style="width:100%;height:100%;"/>
                            </div>
                                <p style="margin:0 0 0 10px; color:#fff; font-size: 24px;">Расписание</p>
                        </div>
                    </a>
                </div>
                <div style="@(showAuthorizBlock ? "display: flex;" : "display: none;")">
                    <a href="@(isAuthorized ? "profile": "auth")" style="margin: 0;">
                        <div class="mini-profile-top" style="display: flex; align-items: center;">
                            @if (isAuthorized)
                            {
                                <div style="display: flex; align-items: center;">
                                    <div class="container-avatar" style="width:35px; height:35px;">
                                        <img style="max-width: 100%; max-height: 100%; width: 100%; height: 100%;" src="@(UrlProfileAvatar)" />
                                    </div>
                                        <p style="margin: 0 0 0 10px; color: white;">@(UserName.Length > 15 ? UserName.Substring(0, 15) + "..." : UserName)</p>
                                </div>
                            }
                            else
                            {
                                <p style="margin: 0;color: white;">Войти</p>
                            }
                        </div>
                    </a>
                </div>
            </div>
        </div>
        <article class="content px-4" style="margin-bottom: 20px;">
            @Body
        </article>
    </main>
    <footer>
        <div>
            <div style="background-color: #A687D0; width:100%; height:2px;"></div>
            <div style="display: flex; padding:10px 0; max-width:1200px; margin:0 auto;">
                <div>
                    <p style="color:#A687D0;">© 2023 DeriDeveloper. Все права защищены.</p>
                </div>
            </div>
        </div>
    </footer>
</div>

</CascadingValue>


@code{
    private bool isAuthorized { get; set; } = false;
    private string UserName { get; set; }
    private string UrlProfileAvatar { get; set; }
    private string? tokenAccess { get; set; }
    private bool showAuthorizBlock { get; set; } = false;
    private bool showLoadingScreen { get; set; } = true;
    private bool showContentPage { get; set; } = false;

    private AccountService _accountService;


    protected override async void OnInitialized()
    {
        _accountService = new AccountService(JSRuntime);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                //ShowLoadingScreen();



                tokenAccess = await _accountService.GetTokenAccessAsync();

                var profileInfoResponse = await Services.ScheduleAPIService.Account.GetProfileInfoAsync(tokenAccess);

                if (profileInfoResponse is not null)
                {
                    isAuthorized = true;

                    UserName = profileInfoResponse.Name;
                    UrlProfileAvatar = $"{Program.UrlAPI}/images/get/{profileInfoResponse.ProfileAvatarName}";

                }

                showAuthorizBlock = true;

                HideLoadingScreen();

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }
    }

    public void ShowLoadingScreen()
    {
        showLoadingScreen = true;
        showContentPage = false;

        StateHasChanged();
    }


    public void HideLoadingScreen()
    {
        showLoadingScreen = false;
        showContentPage = true;

        StateHasChanged();
    }
}